        - module Utils
        - 
        - using CSV
        - using Random
        - using JSON
        - using DataFrames
        - 
        - """
        -     save_results_to_json(results::Dict, filepath::String)
        - 
        - Salva resultados em um arquivo JSON.
        - """
        1 function save_results_to_json(results::Dict, filepath::String)
        1     open(filepath, "w") do file
        1         write(file, JSON.json(results))
        -     end
        - end
        - 
        - """
        -     random_csv_row(file_path::String)
        - 
        - Lê um arquivo CSV e retorna uma linha aleatória como `NamedTuple`.
        - 
        - ### Parâmetros
        - - `file_path::String`: Caminho para o arquivo CSV.
        - 
        - ### Retorno
        - - Um `NamedTuple` representando uma linha aleatória do arquivo CSV.
        - """
        2 function random_csv_row(file_path::String)
        2     if !isfile(file_path)
        1         throw(ArgumentError("O arquivo '$file_path' não foi encontrado ou não é válido."))
        -     end
        2     data = CSV.read(file_path, DataFrame)
        1     random_index = rand(1:nrow(data))
        1     return data[random_index, :]
        - end
        - 
        - """
        -     random_json_object(file_path::String)
        - 
        - Lê um arquivo JSON e retorna um objeto aleatório do conteúdo.
        - 
        - ### Parâmetros
        - - `file_path::String`: Caminho para o arquivo JSON.
        - 
        - ### Retorno
        - - Um objeto aleatório do arquivo JSON (como um valor de um `Dict` ou um `Array`).
        - 
        - """
        3 function random_json_object(file_path::String)
        3     if !isfile(file_path)
        1         throw(ArgumentError("O arquivo '$file_path' não foi encontrado ou não é válido."))
        -     end
        2     data = JSON.parsefile(file_path)
        -     
        2     if isa(data, Array)  # Se for um array
        1         return isempty(data) ? nothing : data[rand(1:length(data))]
        1     elseif isa(data, Dict)  # Se for um dicionário
        1         keys_array = collect(keys(data))
        1         return isempty(keys_array) ? nothing : data[rand(keys_array)]
        -     else
        0         throw(ArgumentError("O arquivo JSON não é um Array ou Dict suportado."))
        -     end
        - end
        - 
        - export save_results_to_json, random_csv_row, random_json_object
        - 
        - end
