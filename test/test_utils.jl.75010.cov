        - using Test
        - using CSV
        - using Random
        - using JSON
        - using DataFrames
        - using Stressify.Utils
        - 
        - @testset "save_results_to_json" begin
        -     results = Dict("test" => 123)
        -     filepath = mktemp()[1]  
        -     Utils.save_results_to_json(results, filepath)
        -     @test isfile(filepath)
        -     loaded_results = JSON.parsefile(filepath)
        -     @test loaded_results == results
        -     rm(filepath)  
        - end
        - 
        1 @testset "random_csv_row" begin
        4     test_data = DataFrame(col1 = [1, 2, 3], col2 = ["a", "b", "c"])
        1     temp_csv = mktemp()[1]
        1     CSV.write(temp_csv, test_data)
        - 
        1     random_row = Utils.random_csv_row(temp_csv)
        1     @test isa(random_row, DataFrameRow)
        -     
        1     for col in names(test_data)
        2         @test random_row[col] in test_data[!, col]
        2     end
        -     
        1     rm(temp_csv)
        2     @test_throws ArgumentError Utils.random_csv_row("non_existent.csv")
        - end
        - 
        - @testset "random_json_object" begin
        -     
        -     test_json = Dict("key1" => "value1", "key2" => "value2")
        -     temp_json = mktemp()[1]
        -     open(temp_json, "w") do f
        1         JSON.print(f, test_json)
        -     end
        - 
        -     random_obj = Utils.random_json_object(temp_json)
        1     @test any(v -> v == random_obj, values(test_json)) 
        -     @test typeof(random_obj) <: Any
        - 
        -     test_json_array = ["a", "b", "c"]
        -     open(temp_json, "w") do f
        1         JSON.print(f, test_json_array)
        -     end
        - 
        -     random_obj_array = Utils.random_json_object(temp_json)
        -     @test random_obj_array in test_json_array
        - 
        -     @test_throws ArgumentError Utils.random_json_object("non_existent.json")
        - 
        -     rm(temp_json) 
        - end
